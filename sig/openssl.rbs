module OpenSSL
  def self.secure_compare: (String a, String b) -> bool
  def self.fixed_length_secure_compare: (String a, String b) -> bool
  class OpenSSLError < StandardError
  end

  class Cipher
    def decrypt: -> Cipher
    def encrypt: -> Cipher
    def final: -> String
    def iv=: (String) -> void
    def key=: (String) -> void
    def random_iv: -> String
    def random_key: -> String
    def update: (String data, ?String buffer) -> String

    private

    def initialize: (String name) -> void
  end

  class HMAC
    def self.digest: (String digest, String key, String data) -> String

    def digest: -> String

    private

    def initialize: (String key, String digest) -> void
  end

  module KDF
    def self.hkdf: (String ikm, salt: String, info: String, length: Integer, hash: String) -> String
    def self.pbkdf2_hmac: (String pass, salt: String, iterations: Integer, length: Integer, hash: String) -> String
  end

  module ASN1
    def self.decode: (String) -> untyped

    class Integer
      private
      def initialize: (Integer | BN) -> void
    end

    class Sequence
      def to_der: -> String

      private
      def initialize: (*untyped) -> void
    end
  end

  class BN
    def to_s: (Integer) -> String

    private

    def initialize: ((BN | Integer | String), ?Integer base) -> void

    CONSTTIME: Integer
  end

  class Digest
    def self.digest: (String name, String data) -> String

    public

    def reset: -> Digest
    def update: (untyped) -> untyped

    private

    def initialize: (String digest, ?String data) -> void
  end

  module PKey
    class EC < OpenSSL::PKey::PKey
      def self.builtin_curves: -> untyped
      def self.generate: (untyped) -> untyped

      public

      def check_key: -> untyped
      def dh_compute_key: (untyped pubkey) -> untyped
      def export: (*untyped) -> untyped
      def generate_key!: -> untyped
      def group: -> untyped
      def group=: (untyped) -> untyped
      def private?: -> bool
      def private_key: -> untyped
      def private_key=: (untyped) -> untyped
      def public?: -> bool
      def public_key: -> untyped
      def public_key=: (untyped) -> untyped
      def to_der: -> untyped

      alias generate_key generate_key!
      alias private_key? private?
      alias public_key? public?
      alias to_pem export

      private

      def initialize: (*untyped) -> void

      def initialize_copy: (untyped) -> untyped

      EXPLICIT_CURVE: Integer
      NAMED_CURVE: Integer

      class Group
        public

        alias == eql?

        def asn1_flag: -> (Integer)
        def asn1_flag=: (Integer) -> (Integer)
        def cofactor: -> untyped
        def curve_name: -> untyped
        def degree: -> untyped
        def eql?: (untyped) -> untyped
        def generator: -> untyped
        def order: -> untyped
        def point_conversion_form: -> Symbol
        def point_conversion_form=: (Symbol) -> Symbol
        def seed: -> untyped
        def seed=: (untyped) -> untyped
        def set_generator: (untyped, untyped, untyped) -> untyped
        def to_der: -> untyped
        def to_pem: -> untyped
        def to_text: -> untyped

        private

        def initialize: (*untyped) -> void

        class Error < OpenSSL::OpenSSLError
        end
      end

      class Point
        public

        alias == eql?

        def add: (untyped) -> untyped
        def eql?: (untyped) -> bool
        def group: -> untyped
        def infinity?: -> bool
        def invert!: -> untyped
        def make_affine!: -> untyped
        def mul: (*untyped) -> untyped
        def on_curve?: -> bool
        def set_to_infinity!: -> untyped
        def to_bn: (?Symbol conversion_form) -> BN
        def to_octet_string: (?Symbol conversion_form) -> String

        private

        def initialize: (*untyped) -> void

        class Error < OpenSSL::OpenSSLError
        end
      end
    end

    class ECError < OpenSSL::PKey::PKeyError
    end

    class PKey
      public

      def compare?: (OpenSSL::PKey::PKey) -> bool
      def decrypt: (String data, untyped options) -> String
      def derive: (OpenSSL::PKey::PKey) -> String
      def encrypt: (String data, untyped options) -> String
      def private_to_der: (?String cipher, ?String password) -> String
      def private_to_pem: (?String cipher, ?String password) -> String
      def public_to_der: -> String
      def public_to_pem: -> String
      def sign: ((String | nil) digest, String data, ?untyped options) -> String
      def sign_raw: ((String | nil) digest, String data, ?untyped options) -> untyped
      def to_text: -> untyped
      def verify: ((String | nil) digest, String signature, String data, ?untyped options) -> bool
      def verify_raw: ((String | nil) digest, String signature, String data, ?untyped options) -> untyped

      private

      def initialize: -> void
    end

    class PKeyError < OpenSSL::OpenSSLError
    end
  end
end

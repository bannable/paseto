# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `flog` gem.
# Please instead update this file by running `bin/tapioca gem flog`.

class Flog < ::MethodBasedSexpProcessor
  # Creates a new Flog instance with +options+.
  #
  # @return [Flog] a new instance of Flog
  #
  # source://flog//lib/flog.rb#226
  def initialize(option = T.unsafe(nil)); end

  # Add a score to the tally. Score can be predetermined or looked up
  # automatically. Uses multiplier for additional spankings.
  # Spankings!
  #
  # source://flog//lib/flog.rb#103
  def add_to_score(name, score = T.unsafe(nil)); end

  # really?
  #
  # source://flog//lib/flog.rb#111
  def average; end

  # Calculates classes and methods scores.
  #
  # source://flog//lib/flog.rb#119
  def calculate; end

  # Calculates the total score and populates @totals.
  #
  # source://flog//lib/flog.rb#299
  def calculate_total_scores; end

  # Returns the value of attribute calls.
  #
  # source://flog//lib/flog.rb#91
  def calls; end

  # Returns true if the form looks like a "DSL" construct.
  #
  #   task :blah do ... end
  #   => s(:iter, s(:call, nil, :task, s(:lit, :blah)), ...)
  #
  # @return [Boolean]
  #
  # source://flog//lib/flog.rb#134
  def dsl_name?(args); end

  # Iterate over the calls sorted (descending) by score.
  #
  # source://flog//lib/flog.rb#148
  def each_by_score(max = T.unsafe(nil)); end

  # Flog the given files. Deals with "-", and syntax errors.
  #
  # Not as smart as FlogCLI's #flog method as it doesn't traverse
  # dirs. Use PathExpander to expand dirs into files.
  #
  # source://flog//lib/flog.rb#167
  def flog(*files); end

  # Flog the given ruby source, optionally using file to provide paths
  # for methods. Smart. Handles syntax errors and timeouts so you
  # don't have to.
  #
  # source://flog//lib/flog.rb#184
  def flog_ruby(ruby, file = T.unsafe(nil), timeout = T.unsafe(nil)); end

  # Flog the given ruby source, optionally using file to provide paths for
  # methods. Does not handle timeouts or syntax errors. See #flog_ruby.
  #
  # source://flog//lib/flog.rb#210
  def flog_ruby!(ruby, file = T.unsafe(nil), timeout = T.unsafe(nil)); end

  # Returns the value of attribute mass.
  #
  # source://flog//lib/flog.rb#91
  def mass; end

  # Returns the method/score pair of the maximum score.
  #
  # source://flog//lib/flog.rb#239
  def max_method; end

  # Returns the maximum score for a single method. Used for FlogTask.
  #
  # source://flog//lib/flog.rb#246
  def max_score; end

  # Returns the value of attribute method_scores.
  #
  # source://flog//lib/flog.rb#92
  def method_scores; end

  # :stopdoc:
  #
  # source://flog//lib/flog.rb#90
  def multiplier; end

  # :stopdoc:
  #
  # source://flog//lib/flog.rb#90
  def multiplier=(_arg0); end

  # source://flog//lib/flog.rb#313
  def no_method; end

  # Returns the value of attribute option.
  #
  # source://flog//lib/flog.rb#91
  def option; end

  # For the duration of the block the complexity factor is increased
  # by #bonus This allows the complexity of sub-expressions to be
  # influenced by the expressions in which they are found.  Yields 42
  # to the supplied block.
  #
  # source://flog//lib/flog.rb#256
  def penalize_by(bonus); end

  # :stopdoc:
  #
  # source://flog//lib/flog.rb#321
  def process_alias(exp); end

  # source://flog//lib/flog.rb#328
  def process_and(exp); end

  # source://flog//lib/flog.rb#338
  def process_attrasgn(exp); end

  # source://flog//lib/flog.rb#346
  def process_block(exp); end

  # source://flog//lib/flog.rb#353
  def process_block_pass(exp); end

  # source://flog//lib/flog.rb#385
  def process_call(exp); end

  # source://flog//lib/flog.rb#417
  def process_case(exp); end

  # source://flog//lib/flog.rb#426
  def process_class(exp); end

  # FIX: remove
  #
  # source://flog//lib/flog.rb#435
  def process_dasgn_curr(exp); end

  # TODO:  it's not clear to me whether this can be generated at all.
  #
  # source://flog//lib/flog.rb#445
  def process_else(exp); end

  # FIX: remove
  #
  # source://flog//lib/flog.rb#435
  def process_iasgn(exp); end

  # source://flog//lib/flog.rb#455
  def process_if(exp); end

  # source://flog//lib/flog.rb#465
  def process_iter(exp); end

  # FIX: remove
  #
  # source://flog//lib/flog.rb#435
  def process_lasgn(exp); end

  # source://flog//lib/flog.rb#505
  def process_lit(exp); end

  # source://flog//lib/flog.rb#521
  def process_masgn(exp); end

  # source://flog//lib/flog.rb#328
  def process_or(exp); end

  # TODO:  it's not clear to me whether this can be generated at all.
  #
  # source://flog//lib/flog.rb#445
  def process_rescue(exp); end

  # source://flog//lib/flog.rb#401
  def process_safe_call(exp); end

  # source://flog//lib/flog.rb#530
  def process_sclass(exp); end

  # source://flog//lib/flog.rb#542
  def process_super(exp); end

  # source://flog//lib/flog.rb#548
  def process_until(exp); end

  # TODO:  it's not clear to me whether this can be generated at all.
  #
  # source://flog//lib/flog.rb#445
  def process_when(exp); end

  # source://flog//lib/flog.rb#548
  def process_while(exp); end

  # source://flog//lib/flog.rb#559
  def process_yield(exp); end

  # Reset score data
  #
  # source://flog//lib/flog.rb#265
  def reset; end

  # Compute the distance formula for a given tally
  #
  # source://flog//lib/flog.rb#277
  def score_method(tally); end

  # Returns the value of attribute scores.
  #
  # source://flog//lib/flog.rb#92
  def scores; end

  # Final threshold that is used for report
  #
  # source://flog//lib/flog.rb#292
  def threshold; end

  # Sets the attribute threshold
  #
  # @param value the value to set the attribute threshold to.
  #
  # source://flog//lib/flog.rb#94
  def threshold=(_arg0); end

  # Returns the value of attribute total_score.
  #
  # source://flog//lib/flog.rb#93
  def total_score; end

  # Returns the value of attribute totals.
  #
  # source://flog//lib/flog.rb#93
  def totals; end
end

# Names of nodes that branch.
#
# source://flog//lib/flog.rb#31
Flog::BRANCHING = T.let(T.unsafe(nil), Array)

# Cut off point where the report should stop unless --all given.
#
# source://flog//lib/flog.rb#19
Flog::DEFAULT_THRESHOLD = T.let(T.unsafe(nil), Float)

# Various non-call constructs
#
# source://flog//lib/flog.rb#36
Flog::OTHER_SCORES = T.let(T.unsafe(nil), Hash)

# The scoring system hash. Maps node type to score.
#
# source://flog//lib/flog.rb#26
Flog::SCORES = T.let(T.unsafe(nil), Hash)

# source://flog//lib/flog.rb#21
Flog::THRESHOLD = T.let(T.unsafe(nil), Float)

# source://flog//lib/flog.rb#14
Flog::VERSION = T.let(T.unsafe(nil), String)

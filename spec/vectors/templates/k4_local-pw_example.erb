  it '<%= name %>' do
    skip('requires RbNaCl') unless Paseto.rbnacl?
    # skip('slow tests run only on command in CI') if <%= options['opslimit'].to_i > 2 %> && ENV['CI'] && !ENV['SLOW_CI']
    <%- if unwrapped -%>
    unwrapped = '<%= unwrapped %>'
    <%- end -%>
    password = '<%= password %>'
    options = <%= options.transform_keys(&:to_sym) %>
    paserk = '<%= paserk %>'
    pbkw = Paseto::Operations::PBKW.new(Paseto::Protocol::Version4.new, password)

    <%- if expect_fail -%>
    <%- if options['iterations'] -%>
    expect do
      pbkw.decode(paserk)
    end.to raise_error(Paseto::LucidityError)
    <%- else -%>
    expect do
      Paseto::Paserk.from_paserk(paserk: paserk, password: password)
    end.to raise_error(Paseto::InvalidAuthenticator)
    <%- end -%>

    expect do
      pbkw.encode(Paseto::V3::Local.new(ikm: 0.chr * 32), options)
    end.to raise_error(Paseto::LucidityError)
    <%- else -%>
    key = Paseto::Paserk.from_paserk(paserk: paserk, password: password)
    repacked = Paseto::Paserk.pbkw(key: key, password: password, options: options)
    unpacked = Paseto::Paserk.from_paserk(paserk: paserk, password: password)

    expect(unpacked).to eq(key)
    <%- end -%>
  end

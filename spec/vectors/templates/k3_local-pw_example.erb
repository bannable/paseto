  it '<%= name %>', :slow do
    <%- if unwrapped -%>
    unwrapped = '<%= unwrapped %>'
    unwrapped_raw = Paseto::Util.decode_hex(unwrapped)
    <%- end -%>
    password = '<%= password %>'
    options = <%= options.transform_keys(&:to_sym) %>
    paserk = '<%= paserk %>'
    pbkw = Paseto::Operations::PBKW.new(Paseto::Protocol::Version3.instance, password)

    <%- if expect_fail -%>
    <%- if options['iterations'] -%>
    expect do
      Paseto::Paserk.from_paserk(paserk: paserk, password: password)
    end.to raise_error(Paseto::InvalidAuthenticator)
    <%- else -%>
    expect do
      pbkw.decode(paserk)
    end.to raise_error(Paseto::LucidityError)
    <%- end -%>

    if Paseto.rbnacl?
      expect do
        pbkw.encode(Paseto::V4::Local.new(ikm: 0.chr * 32), options)
      end.to raise_error(Paseto::LucidityError)
    end
    <%- else -%>
    key = Paseto::Paserk.from_paserk(paserk: paserk, password: password)
    repacked = Paseto::Paserk.pbkw(key: key, password: password, options: options)
    unpacked = Paseto::Paserk.from_paserk(paserk: paserk, password: password)

    expect(unpacked).to eq(key)
    <%- end -%>
  end

  it '<%= name %>' do
    # skip('slow tests run only on command in CI') if ENV['CI'] && !ENV['SLOW_CI']
    <%- if unwrapped -%>
    unwrapped = '<%= unwrapped %>'
    unwrapped_raw = Paseto::Util.decode_hex(unwrapped)
    <%- end -%>
    password = '<%= password %>'
    options = <%= options.transform_keys(&:to_sym) %>
    paserk = '<%= paserk %>'

    if Paseto.rbnacl?
      pbkw = Paseto::Operations::PBKW.new(Paseto::Protocol::Version4.new, password)
      <%- if expect_fail -%>
        <%- if options['iterations'] || paserk.start_with?('k3') -%>
      expect do
        pbkw.decode(paserk)
      end.to raise_error(Paseto::LucidityError)
        <%- else -%>
      expect do
        pbkw.decode(paserk)
      end.to raise_error(Paseto::InvalidAuthenticator)

      expect do
        pbkw.encode(Paseto::V3::Local.new(ikm: 0.chr * 32), options)
      end.to raise_error(Paseto::LucidityError)
        <%- end -%>
      <%- else -%>
      key = pbkw.decode(paserk)
      expect(key.to_bytes.unpack1('H*')).to eq(unwrapped)
      expect(pbkw.decode(pbkw.encode(key, options)).to_bytes.unpack1('H*')).to eq(unwrapped)
      <%- end -%>
    else
      expect do
        Paseto::Operations::PBKW.new(Paseto::Protocol::Version4.new, password)
      end.to raise_error(Paseto::UnknownProtocol)
    end
  end

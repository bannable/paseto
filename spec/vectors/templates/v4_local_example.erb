  it '<%= name %>', :sodium do
    nonce = Paseto::Util.decode_hex('<%= nonce %>')
    key = Paseto::Util.decode_hex('<%= key %>')
    tok = %[<%= token %>]
    <%- if payload -%>
    payload = %[<%= payload %>]
    <%- else -%>
    payload = nil
    <%- end -%>
    footer = %[<%= footer %>]
    ia = %[<%= implicit_assertion %>]

    token = Paseto::Token.parse(tok)
    local = Paseto::V4::Local.new(ikm: key)

    <%- if expect_fail -%>
    expect do
      local.encrypt(message: payload, footer: footer, implicit_assertion: ia, n: nonce)
    end.to raise_error(TypeError)

    message = begin
                local.decrypt(token: token, implicit_assertion: ia)
              rescue Paseto::InvalidAuthenticator, Paseto::LucidityError, Paseto::ParseError
                nil
              end
    expect(message).to be_nil
    <%- else -%>
    expect(local.encrypt(message: payload, footer: footer, implicit_assertion: ia, n: nonce)).to eq(tok)

    expect(local.decrypt(token: token, implicit_assertion: ia)).to eq(payload)
    <%- end -%>
  end

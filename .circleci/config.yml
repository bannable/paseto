# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

shared_env: &shared_env
  TEST_QUEUE_WORKERS: 2
  CC_TEST_REPORTER_ID: 9643f9411ff1c1d359175e948cf67205d2c35883e9dc2a6d45ffde54829abfb2

all_jobs_matrix: &all_jobs_matrix
    parameters:
      version: ["3.0", "3.1"]
      appraisal: [standalone, rbnacl]

commands:
  install-dependencies:
    description: "Install gems with bundler and appraisal"
    parameters:
      appraisal:
          type: string
          default: standalone
      version:
          type: string
          default: "3.1"
    steps:
      - restore_cache:
          keys:
            - gem-cache-v4-<< parameters.version >>-{{ arch }}-{{ checksum "gemfiles/<< parameters.appraisal >>.gemfile" }}-{{ checksum "gemfiles/<< parameters.appraisal >>.gemfile.lock" }}
            - gem-cache-v4-<< parameters.version >>-{{ arch }}-{{ checksum "gemfiles/<< parameters.appraisal >>.gemfile" }}
            - gem-cache-v4-<< parameters.version >>-{{ arch }}
      - run:
          name: "Install bundler"
          command : |
            #!/usr/bin/env bash

            TARGET_GEMFILE="./gemfiles/$PARAM_APPRAISAL.gemfile.lock"

            APP_BUNDLER_VERSION=$(tail -1 $TARGET_GEMFILE | tr -d " ")
            if [ -z "$APP_BUNDLER_VERSION" ]; then
              echo "Could not find bundler version from lockfile."
              exit 1
            else
              echo "Lock file detected bundler version $APP_BUNDLER_VERSION"
            fi

            if ! bundle version | grep -q $APP_BUNDLER_VERSION; then
              echo "Installing bundler $APP_BUNDLER_VERSION"
              gem install bundler:$APP_BUNDLER_VERSION
            else
              echo "bundler $APP_BUNDLER_VERSION is already installed."
            fi
          environment:
            PARAM_APPRAISAL: << parameters.appraisal >>
      - run:
          name: "Bundle/Appraisal Install"
          command : |
            #!/usr/bin/env bash

            bundle config set deployment 'true'
            bundle config set path "./vendor/bundle"

            bundle install
            bundle exec appraisal install
          environment:
            PARAM_APPRAISAL: << parameters.appraisal >>
      - save_cache:
          key: gem-cache-v4-<< parameters.version >>-{{ arch }}-{{ checksum "gemfiles/<< parameters.appraisal >>.gemfile" }}-{{ checksum "gemfiles/<< parameters.appraisal >>.gemfile.lock" }}
          paths:
            - ./vendor/bundle

jobs:
  specs:
    parameters:
      version:
        type: string
        default: "3.1"
      appraisal:
        type: string
        default: standalone
    docker:
      - image: cimg/ruby:<< parameters.version >>
    environment:
      <<: *shared_env
    parallelism: 4
    steps:
      - checkout
      - attach_workspace:
          at: tmp
      - install-dependencies:
          appraisal: << parameters.appraisal >>
          version: << parameters.version >>
      - run:
          name: Run specs
          command: |
            #!/usr/bin/env bash


            if ! mkdir -p "/tmp/test-results/"; then
              printf '%s\n' "Failed to create output directory: /tmp/test-results/rspec"
              exit 1
            fi

            readonly o_ifs="$IFS"
            IFS=","
            read -ra specs \<<< "spec/**/*_spec.rb"
            circle_split=$(circleci tests glob "${specs[@]}" | circleci tests split --split-by=timings)
            while IFS= read -r line; do spec_files+=("$line"); done \<<< "$circle_split"

            IFS="$o_ifs"

            ./tmp/cc-test-reporter before-build
            set -x
            bundle exec appraisal << parameters.appraisal >> rspec "${spec_files[@]}" --profile 10 --order random --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec
            set +x
            ./tmp/cc-test-reporter format-coverage --output tmp/codeclimate.$CIRCLE_JOB.json
            ls -l /tmp/
      - store_test_results:
          path: /tmp/test-results/rspec
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.*.json

  codeclimate-setup:
    docker:
      - image: cimg/ruby:3.1
    steps:
      - run:
          name: Download Code Climate test-reporter
          command: |
            mkdir -p tmp
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter

  codeclimate-upload:
    docker:
      - image: cimg/ruby:3.1
    environment:
      <<: *shared_env
    steps:
      - attach_workspace:
          at: tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            #!/usr/bin/env bash

            ls -l /tmp/
            PART_COUNT=$(find /tmp/ -name codeclimate.*.json -type f | wc -l)
            echo "Found ($PART_COUNT) parts"
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json --parts $PART_COUNT --output tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage --input tmp/codeclimate.total.json

  rubocop:
    docker:
      - image: cimg/ruby:3.1
    steps:
      - checkout
      - install-dependencies
      - run:
          name: "Rubocop"
          command: |
            bundle exec rubocop --parallel

  typecheck:
    docker:
      - image: cimg/ruby:3.1
    steps:
      - checkout
      - install-dependencies
      - run:
          name: "Sorbet Typecheck"
          command: |
            bundle exec srb tc

workflows:
  build:
    jobs:
      - codeclimate-setup
      - typecheck
      - specs:
          matrix:
            <<: *all_jobs_matrix
          requires:
            - codeclimate-setup
      - rubocop
      - codeclimate-upload:
          requires:
            - specs
